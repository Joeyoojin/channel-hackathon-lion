import axios from 'axios';
import * as crypto from 'crypto';
import { createClient } from '@supabase/supabase-js';
import Groq from 'groq-sdk';

require("dotenv").config();

let channelTokenMap = new Map<string, [string, string, number]>();

const defaultWamArgs = ["rootMessageId", "broadcast", "isPrivate"];

const supabase = createClient(
    process.env.SUPABASE_URL ?? '',
    process.env.SUPABASE_ANON_KEY ?? ''
);

const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

async function getChannelToken(channelId: string): Promise<[string, string]> {
    const channelToken = channelTokenMap.get(channelId);
    if (channelToken === undefined || channelToken[2] < new Date().getTime() / 1000) {
        const [accessToken, refreshToken, expiresAt]: [string, string, number] = await requestIssueToken(channelId);
        channelTokenMap.set(channelId, [accessToken, refreshToken, expiresAt]);
        return [accessToken, refreshToken]
    }
    else {
        return [channelToken[0], channelToken[1]]
    }
}

async function requestIssueToken(channelId?: string): Promise<[string, string, number]> {
    let body = {
        method: 'issueToken',
        params: {
            secret: process.env.APP_SECRET,
            channelId: channelId
        }
    };

    const headers = {
        'Content-Type': 'application/json'
    };

    const response = await axios.put(process.env.APPSTORE_URL ?? '', body, { headers });

    const accessToken = response.data.result.accessToken;
    const refreshToken = response.data.result.refreshToken;
    const expiresAt = new Date().getTime() / 1000 + response.data.result.expiresIn - 5;

    return [accessToken, refreshToken, expiresAt];
}

async function registerCommand(accessToken: string) {
    const body = {
        method: "registerCommands",
        params: {
            appId: process.env.APP_ID,
            commands: [
                {
                    name: "apply",
                    scope: "front",
                    description: "ÏûÖÎ∂Ä ÏßÄÏõêÏÑúÎ•º ÏûëÏÑ±Ìï©ÎãàÎã§",
                    actionFunctionName: "apply",
                    alfMode: "disable",
                    enabledByDefault: true,
                },
                {
                    name: "faq",
                    scope: "front",
                    description: "ÏßÄÏõê Í¥ÄÎ†® Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï©ÎãàÎã§",
                    actionFunctionName: "faq",
                    alfMode: "disable",
                    enabledByDefault: true,
                },
                {
                    name: "result",
                    scope: "front",
                    description: "ÏßÄÏõê Í≤∞Í≥ºÎ•º ÌôïÏù∏Ìï©ÎãàÎã§",
                    actionFunctionName: "result",
                    alfMode: "disable",
                    enabledByDefault: true,
                }
            ]
        }
    };

    const headers = {
        'x-access-token': accessToken,
        'Content-Type': 'application/json'
    };

    const response = await axios.put(process.env.APPSTORE_URL ?? '', body, { headers });

    if (response.data.error != null) {
        throw new Error("register command error");
    }
}

function verification(x_signature: string, body: string): boolean {
    const key: crypto.KeyObject = crypto.createSecretKey(Buffer.from(process.env.SIGNING_KEY ?? '', 'hex'));
    const mac = crypto.createHmac('sha256', key);
    mac.update(body, 'utf8');

    const signature: string = mac.digest('base64');
    return signature === x_signature;
}

function apply(wamName: string, callerId: string, params: any) {
    const wamArgs = {
        managerId: callerId,
    } as { [key: string]: any }

    if (params.trigger.attributes) {
        defaultWamArgs.forEach(k => {
            if (k in params.trigger.attributes) {
                wamArgs[k] = params.trigger.attributes[k]
            }
        })
    }

    return ({
        result: {
            type: "wam",
            attributes: {
                appId: process.env.APP_ID,
                name: wamName,
                wamArgs: wamArgs,
            }
        }
    });
}

function faq(wamName: string, callerId: string, params: any) {
    const wamArgs = {
        managerId: callerId,
    } as { [key: string]: any }

    if (params.trigger.attributes) {
        defaultWamArgs.forEach(k => {
            if (k in params.trigger.attributes) {
                wamArgs[k] = params.trigger.attributes[k]
            }
        })
    }

    return ({
        result: {
            type: "wam",
            attributes: {
                appId: process.env.APP_ID,
                name: wamName,
                wamArgs: wamArgs,
            }
        }
    });
}

function result(wamName: string, callerId: string, params: any) {
    const wamArgs = {
        managerId: callerId,
    } as { [key: string]: any }

    if (params.trigger.attributes) {
        defaultWamArgs.forEach(k => {
            if (k in params.trigger.attributes) {
                wamArgs[k] = params.trigger.attributes[k]
            }
        })
    }

    return ({
        result: {
            type: "wam",
            attributes: {
                appId: process.env.APP_ID,
                name: wamName,
                wamArgs: wamArgs,
            }
        }
    });
}

async function applyAction(channelId: string, user_name: string, user_email: string, resume_data: any[], groupId: string, broadcast: boolean, rootMessageId?: string) {
    const processedResults = [];
    
    for (const item of resume_data) {
        try {
            const prompt = `
Îã§ÏùåÏùÄ ÏûêÍ∏∞ÏÜåÍ∞úÏÑú ÎÇ¥Ïö©ÏûÖÎãàÎã§.

1. ÎãµÎ≥ÄÏóêÏÑú Í∞úÏù∏ÏùÑ ÏãùÎ≥ÑÌï† Ïàò ÏûàÎäî Ï†ïÎ≥¥(Ïù¥Î¶Ñ, ÌïôÍµêÎ™Ö, ÌöåÏÇ¨Î™Ö, ÏßÄÏó≠Î™Ö, ÌäπÏ†ï ÎåÄÌöåÎ™Ö, Ï°∞ÏßÅÎ™Ö Îì±)Î•º Î™®Îëê Îã®Ïñ¥ Îã®ÏúÑÎ°ú '***'Î°ú ÎßàÏä§ÌÇπÌïòÏÑ∏Ïöî.
   - ÏòàÏãú:
     - "Ï†ÄÎäî ÏÑúÏö∏ÎåÄÌïôÍµêÎ•º Ï°∏ÏóÖÌñàÏäµÎãàÎã§." ‚Üí "Ï†ÄÎäî ***Î•º Ï°∏ÏóÖÌñàÏäµÎãàÎã§."
     - "ÏÇºÏÑ±Ï†ÑÏûêÏóêÏÑú Ïù∏ÌÑ¥Ïã≠ÏùÑ ÌñàÏäµÎãàÎã§." ‚Üí "***ÏóêÏÑú Ïù∏ÌÑ¥Ïã≠ÏùÑ ÌñàÏäµÎãàÎã§."

2. ÏßàÎ¨∏-ÎãµÎ≥Ä ÏåçÏóê ÎåÄÌï¥ Î©¥Ï†ëÏóêÏÑú ÎÇòÏò¨ Ïàò ÏûàÎäî ÏòàÏÉÅ ÏßàÎ¨∏ÏùÑ ÌïúÍµ≠Ïñ¥Î°ú 3Í∞ú ÏÉùÏÑ±ÌïòÏÑ∏Ïöî.
   - ÏòàÏÉÅ ÏßàÎ¨∏ÏùÄ ÎãµÎ≥Ä ÎÇ¥Ïö©ÏùÑ Í∏∞Î∞òÏúºÎ°ú ÏÉùÏÑ±ÌïòÏÑ∏Ïöî.

ÏûêÍ∏∞ÏÜåÍ∞úÏÑú ÎÇ¥Ïö©:
ÏßàÎ¨∏: "${item.Q1}"
ÎãµÎ≥Ä: "${item.A1}"

Ï∂úÎ†• ÌòïÏãù:
{
    "question": "ÏõêÎûò ÏßàÎ¨∏",
    "answer": "ÎßàÏä§ÌÇπÎêú ÎãµÎ≥Ä",
    "interview_question1": "ÏòàÏÉÅ ÏßàÎ¨∏1",
    "interview_question2": "ÏòàÏÉÅ ÏßàÎ¨∏2",
    "interview_question3": "ÏòàÏÉÅ ÏßàÎ¨∏3"
}

Î∞òÎìúÏãú ÏúÑÏùò Ï∂úÎ†• ÌòïÏãùÍ≥º ÎèôÏùºÌïòÍ≤å JSON ÌòïÏãùÏúºÎ°ú Ï∂úÎ†•ÌïòÍ≥†, Î™®Îì† ÎÇ¥Ïö©ÏùÄ ÌïúÍµ≠Ïñ¥Î°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.
`;

            const completion = await groq.chat.completions.create({
                messages: [
                    {
                        role: "user",
                        content: prompt
                    }
                ],
                model: "mixtral-8x7b-32768"
            });

            const content = completion.choices[0]?.message?.content;
            if (!content) continue;

            // JSON Î∂ÄÎ∂Ñ Ï∂îÏ∂ú (Ï†ïÍ∑úÏãù ÏÇ¨Ïö©)
            const match = content.match(/\{[\s\S]*\}/);
            if (!match) continue;

            const result = JSON.parse(match[0]);
            processedResults.push(result);

        } catch (error) {
            console.error("Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
            processedResults.push({
                question: item.Q1,
                answer: item.A1,
                interview_question1: "** ÏóêÎü¨ Î∞úÏÉùÏúºÎ°ú ÏòàÏÉÅ ÏßàÎ¨∏ ÏÉùÏÑ± Î∂àÍ∞Ä **",
                interview_question2: "** ÏóêÎü¨ Î∞úÏÉùÏúºÎ°ú ÏòàÏÉÅ ÏßàÎ¨∏ ÏÉùÏÑ± Î∂àÍ∞Ä **",
                interview_question3: "** ÏóêÎü¨ Î∞úÏÉùÏúºÎ°ú ÏòàÏÉÅ ÏßàÎ¨∏ ÏÉùÏÑ± Î∂àÍ∞Ä **"
            });
            continue;
        }
    }

    // Ï≤òÎ¶¨Îêú Í≤∞Í≥ºÎ•º DBÏóê Ï†ÄÏû•
    try {
        const { data: insertData, error } = await supabase
            .from('screened-resumes')
        .insert({
            applicant_name: user_name,
            applicant_email: user_email,
                resume_data: JSON.stringify(processedResults)
            });
    } catch (error) {
        console.error("DB Ï†ÄÏû• Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
        throw error;
    }

    // Ï≤òÎ¶¨Îêú Í≤∞Í≥ºÎ•º Î©îÏãúÏßÄÎ°ú Î≥ÄÌôò 
    let sendAsBotMsg = `üìù ${user_name}(${user_email}) ÏßÄÏõêÏÑú Ï†úÏ∂ú ÏôÑÎ£å. DB Ï†ÄÏû• ÏôÑÎ£å`;

    const body = {
        method: "writeGroupMessage",
        params: {
            channelId: channelId,
            groupId: groupId,
            rootMessageId: rootMessageId,
            broadcast: broadcast,
            dto: {
                plainText: sendAsBotMsg,
                botName: "ÏßÄÏõêÏÑú Î∂ÑÏÑù Î¥á"
            }
        }
    }

    const channelToken = await getChannelToken(channelId);

    const headers = {
        'x-access-token': channelToken[0],
        'Content-Type': 'application/json'
    };

    try {
        const response = await axios.put(process.env.APPSTORE_URL ?? '', body, { headers });

        if (response.data.error != null) {
            throw new Error("Î©îÏãúÏßÄ Ï†ÑÏÜ° Ï§ë Ïò§Î•ò Î∞úÏÉù");
        }
    } catch (error) {
        console.error("Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®:", error);
        throw error;
    }
}

async function interviewScheduleRegister(channelId: string, user_name: string, user_email: string, interview_dates: [string, string][], groupId: string, broadcast: boolean, rootMessageId?: string) {
    try {
        const { data: insertData, error } = await supabase
            .from('interview-schedule')
            .insert(
                interview_dates.map(([date, time]) => ({
                    applicant_name: user_name,
                    applicant_email: user_email, 
                    interview_date: date,
                    interview_time: parseInt(time)
                }))
            );

        if (error) {
            throw error;
        }

        // Î©îÏãúÏßÄ Ìè¨Îß∑ÌåÖ
        let sendAsBotMsg = "‚úÖ Î©¥Ï†ë ÏùºÏ†ï Îì±Î°ù ÏôÑÎ£å\n\n";
        sendAsBotMsg += `Ïã†Ï≤≠Ïûê: ${user_name} (${user_email})\n\n`;
        sendAsBotMsg += "üìÖ ÏÑ†ÌÉùÌïòÏã† Î©¥Ï†ë ÏãúÍ∞Ñ:\n";
        interview_dates.forEach(([date, time]) => {
            sendAsBotMsg += `‚Ä¢ ${date} ${time}:00\n`;
        });
        
        const body = {
            method: "writeGroupMessage",
            params: {
                channelId: channelId,
                groupId: groupId,
                rootMessageId: rootMessageId,
                broadcast: broadcast,
                dto: {
                    plainText: sendAsBotMsg,
                    botName: "Î©¥Ï†ë ÏùºÏ†ï Í¥ÄÎ¶¨ Î¥á"
                }
            }
        };

        const channelToken = await getChannelToken(channelId);
        const headers = {
            'x-access-token': channelToken[0],
            'Content-Type': 'application/json'
        };

        const response = await axios.put(process.env.APPSTORE_URL ?? '', body, { headers });
        if (response.data.error != null) {
            throw new Error("Î©îÏãúÏßÄ Ï†ÑÏÜ° Ï§ë Ïò§Î•ò Î∞úÏÉù");
        }

    } catch (error) {
        console.error("Î©¥Ï†ë ÏùºÏ†ï Îì±Î°ù Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
        throw error;
    }
}

async function interviewScheduleStatus(channelId: string, groupId: string, broadcast: boolean, rootMessageId?: string) {
    try {
        // SupabaseÏóêÏÑú Î©¥Ï†ëÏùºÏ†ï Ïã†Ï≤≠ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
        const { data: schedules, error } = await supabase
            .from('interview-schedule')
            .select('interview_date, interview_time, applicant_name, applicant_email')
            .order('interview_date')
            .order('interview_time');

        if (error) {
            throw error;
        }

        // (ÎÇ†Ïßú, ÏãúÍ∞Ñ)Î≥ÑÎ°ú ÏßÄÏõêÏûê grouping
        const groupedSchedules = schedules.reduce((acc: any, curr) => {
            const key = `${curr.interview_date}_${curr.interview_time}`;
            if (!acc[key]) {
                acc[key] = {
                    date: curr.interview_date,
                    time: curr.interview_time,
                    applicants: []
                };
            }
            acc[key].applicants.push(`${curr.applicant_name} (${curr.applicant_email})`);
            return acc;
        }, {});


        let sendAsBotMsg = "üìã Î©¥Ï†ë ÏùºÏ†ï ÌòÑÌô©\n\n";
        Object.values(groupedSchedules).forEach((schedule: any) => {
            sendAsBotMsg += `üìÖ ${schedule.date} ${schedule.time}:00\n`;
            schedule.applicants.forEach((applicant: string) => {
                sendAsBotMsg += `‚Ä¢ ${applicant}\n`;
            });
            sendAsBotMsg += "\n";
        });

        const body = {
            method: "writeGroupMessage",
            params: {
                channelId: channelId,
                groupId: groupId,
                rootMessageId: rootMessageId,
                broadcast: broadcast,
                dto: {
                    plainText: sendAsBotMsg,
                    botName: "Î©¥Ï†ë ÏùºÏ†ï Í¥ÄÎ¶¨ Î¥á"
                }
            }
        };

        const channelToken = await getChannelToken(channelId);
        const headers = {
            'x-access-token': channelToken[0],
            'Content-Type': 'application/json'
        };

        const response = await axios.put(process.env.APPSTORE_URL ?? '', body, { headers });
        if (response.data.error != null) {
            throw new Error("Î©îÏãúÏßÄ Ï†ÑÏÜ° Ï§ë Ïò§Î•ò Î∞úÏÉù");
        }

    } catch (error) {
        console.error("Î©¥Ï†ë ÏùºÏ†ï Ï°∞Ìöå Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
        throw error;
    }
}

async function resultCheck(user_name: string, user_email: string) {
    try {
        const { data: resultData, error } = await supabase
            .from('apply-result')
            .select('pass')
            .eq('applicant_name', user_name)
            .eq('applicant_email', user_email);

        if (error) {
            throw error;
        }

        if (resultData && resultData.length > 0) {
            return resultData[0].pass;
        }
        return false;
    } catch (error) {
        console.error("ÏßÄÏõê Í≤∞Í≥º Ï°∞Ìöå Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
        // Ï∞æÏùÑ Ïàò ÏóÜÏúºÎØÄÎ°ú Î∂àÌï© Ï≤òÎ¶¨
        return false;
    }
}

export { requestIssueToken, registerCommand, verification, apply, faq, result, applyAction, interviewScheduleRegister, interviewScheduleStatus, resultCheck };
